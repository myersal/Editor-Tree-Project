package editortrees;

import editortrees.Node.Code;

// A height-balanced binary tree with rank that could be the basis for a text editor.

public class EditTree {

	private Node root;

	public int rotationCounter = 0;
	public static Node NULL_NODE = new Node();

	/**
	 * Construct an empty tree
	 */
	public EditTree() {
		this.root = NULL_NODE;
	}

	/**
	 * Construct a single-node tree whose element is c
	 * 
	 * @param c
	 */
	public EditTree(char c) {
		this.root = new Node(c, NULL_NODE);
	}

	/**
	 * Create an EditTree whose toString is s. This can be done in O(N) time,
	 * where N is the length of the tree (repeatedly calling insert() would be
	 * O(N log N), so you need to find a more efficient way to do this.
	 * 
	 * @param s
	 */
	public EditTree(String s) {
//		this.root = NULL_NODE;
//		if(s != "") {
//			this.root = new Node(s.charAt(0), NULL_NODE);
//		}
//		for(int i = 1; i < s.length(); i++) {
//			this.add(s.charAt(i));
//		}
		
		//need to update the balance codes and ranks somehow and then this should be done
		if(s.equals("")) {
			this.root = NULL_NODE;
			return;
		}
		int length = s.length();
		int current = length/ 2; 
		this.root = new Node(s.charAt(current), NULL_NODE);
		this.root.left = EditTreeSHelper(s.substring(0, current), this.root);
		this.root.right = EditTreeSHelper(s.substring(current + 1), this.root);
		
	}
	
	public Node EditTreeSHelper(String s, Node parent) {
		
		if(s.equals("")) {
			return NULL_NODE;
		}
		
		int current = s.length() / 2;
		
		Node currentNode = new Node(s.charAt(current), parent);
		currentNode.left = EditTreeSHelper(s.substring(0, current), currentNode);
		currentNode.right = EditTreeSHelper(s.substring(current + 1), currentNode);	
		
		return currentNode;
		
	}

	/**
	 * Make this tree be a copy of e, with all new nodes, but the same shape and
	 * contents.
	 * 
	 * @param e
	 * 		tree to copy
	 */
	public EditTree(EditTree e) {
		//checks to see if you are copying an empty tree
		if(e.root == NULL_NODE) {
			this.root = NULL_NODE;
			return;
		}
		
		//creates a new node to set as the new root with the same balance and rank as the other tree		
		Node newRoot = new Node(e.root.element, NULL_NODE, e.root.rank, e.root.balance);
		newRoot.createTree(e.root);
		this.root = newRoot;
		
	}

	/**
	 * 
	 * @return the height of this tree
	 */
	public int height() {
		return this.root.height(); // replace by a real calculation.
	}

	/**
	 * 
	 * returns the total number of rotations done in this tree since it was
	 * created. A double rotation counts as two.
	 *
	 * @return number of rotations since tree was created.
	 */
	public int totalRotationCount() {
		return this.rotationCounter;
	}

	/**
	 * return the string produced by an inorder traversal of this tree
	 */
	@Override
	public String toString() {

		return this.root.toString();

	}

	/**
	 * This one asks for more info from each node. You can write it like the
	 * arraylist-based toString() method from the BST assignment. However, the
	 * output isn't just the elements, but the elements, ranks, and balance
	 * codes. Former CSSE230 students recommended that this method, while making
	 * it harder to pass tests initially, saves them time later since it catches
	 * weird errors that occur when you don't update ranks and balance codes
	 * correctly. For the tree with node b and children a and c, it should
	 * return the string: [b1=, a0=, c0=] There are many more examples in the
	 * unit tests.
	 * 
	 * @return The string of elements, ranks, and balance codes, given in a
	 *         pre-order traversal of the tree.
	 */
	public String toDebugString() {
		String result = "["; // creates a string to return and add to
		result += this.root.toDebugString();
		if (this.root.toDebugString() == "") { // checks to see if the string is
												// an empty string
			// do nothing
		} else { // if not empty then shorten the length by two to get rid of
					// the extra space and comma
			result = result.substring(0, result.length() - 2);
		}
		return result + "]";
	}

	/**
	 * 
	 * @param pos
	 *            position in the tree
	 * @return the character at that position
	 * @throws IndexOutOfBoundsException
	 */
	public char get(int pos) throws IndexOutOfBoundsException {
		// if position is greater than
		// the size throws and
		// exception.
		if (pos >= this.root.size() || pos < 0)
			throw new IndexOutOfBoundsException();
		return this.root.get(pos);
	}

	/**
	 * 
	 * @param c
	 *            character to add to the end of this tree.
	 */
	public void add(char c) {
		// Notes:
		// 1. Please document chunks of code as you go. Why are you doing what
		// you are doing? Comments written after the code is finalized tend to
		// be useless, since they just say WHAT the code does, line by line,
		// rather than WHY the code was written like that. Six months from now,
		// it's the reasoning behind doing what you did that will be valuable to
		// you!
		// 2. Unit tests are cumulative, and many things are based on add(), so
		// make sure that you get this one correct.

		// checks to see if the tree is empty and if so sets the root to the new
		// element

		if (this.root == NULL_NODE) {
			this.root = new Node(c, NULL_NODE);
		} else { // else goes through the add method
			Node current = this.root.add(c);
			addHelperMethod(current);
		}

	}

	/**
	 * 
	 * A helper method that checks the balance codes after adding.
	 *
	 * @param current
	 *            node to begin checking balance codes with
	 */

	public void addHelperMethod(Node current) {
		while (current.parent != EditTree.NULL_NODE) { // makes sure the current
														// is not the root
			// Leaf is on the left
			if (current.parent.left.equals(current)) {
				// Was right leaning, now balanced
				if (current.parent.balance == Code.RIGHT) {
					current.parent.balance = Code.SAME;
					return;
				}
				// Tilted left twice, need to rotate
				// Current parent is our pivot
				if (current.parent.balance == Code.LEFT) {
					// Current is pivot's child, need to double rotate if it's
					// left-right
					if (current.balance == Code.RIGHT) {
						Node temp = root.doubleRightRotation(current.parent,
								current, current.right);
						if (temp.parent == NULL_NODE) {
							root = temp;
						}
						// adds 2 to the counter after double rotating
						rotationCounter = rotationCounter + 2;
						return;
						// Current is pivot's child, need to single rotate if
						// it's left-left
					}
					// needs to be a single rotation since there is a double
					// left
					if (current.balance == Code.LEFT) {
						Node temp = root.singleRightRotation(current.parent,
								current);
						if (temp.parent == NULL_NODE) {
							root = temp;
						}
						// adds to the rotation counter after rotating right
						rotationCounter++;
						return;
					}
				}
				if (current.parent.balance == Code.SAME) {
					current.parent.balance = Code.LEFT;
				}
			}
			// Leaf is on the right
			if (current.parent.right.equals(current)) {
				// if the parents code is right and the parents code is right
				// there needs to be a rotation
				if (current.parent.balance == Code.RIGHT) {
					// if parent is right and current is left there needs to be
					// a double rotation
					if (current.balance == Code.LEFT) {
						Node temp = root.doubleLeftRotation(current.parent,
								current, current.left);
						if (temp.parent == NULL_NODE) {
							root = temp;
						}
						// adds a double rotation to the counter
						rotationCounter = rotationCounter + 2;
						return;
					}
					// if the current is right and parent is right it is a
					// single rotation
					if (current.balance == Code.RIGHT) {
						Node temp = root.singleLeftRotation(current.parent,
								current);
						if (temp.parent == NULL_NODE) {
							root = temp;
						}
						// adds a single rotation to the counter
						rotationCounter++;
						return;
					}
				}
				// balances the parent code if no rotation is needed
				if (current.parent.balance == Code.LEFT) {
					current.parent.balance = Code.SAME;
					return;
				}
				if (current.parent.balance == Code.SAME) {
					current.parent.balance = Code.RIGHT;
				}
			}
			current = current.parent;
		}
	}

	/**
	 * 
	 * @param c
	 *            character to add
	 * @param pos
	 *            character added in this inorder position
	 * @throws IndexOutOfBoundsException
	 *             id pos is negative or too large for this tree
	 */
	public void add(char c, int pos) throws IndexOutOfBoundsException {
		// checks to see if the size is less than 0 or bigger than the number of
		// nodes in the tree
		if (pos > this.size() || pos < 0) {
			throw new IndexOutOfBoundsException();
		}
		//if the root is null it replaces the root with the new node
		if (this.root == NULL_NODE) {
			this.root = new Node(c, NULL_NODE);
		} else {
			//adds the node to the tree at the position specified
			Node current = this.root.add(c, pos);
			addHelperMethod(current);
		}

	}

	/**
	 * 
	 * @return the number of nodes in this tree
	 */
	public int size() {
		return this.root.size(); // calls the root and then calculates size
	}

	/**
	 * 
	 * @param pos
	 *            position of character to delete from this tree
	 * @return the character that is deleted
	 * @throws IndexOutOfBoundsException
	 */
	public char delete(int pos) throws IndexOutOfBoundsException {
		// Implementation requirement:
		// When deleting a node with two children, you normally replace the
		// node to be deleted with either its in-order successor or predecessor.
		// The tests assume assume that you will replace it with the
		// *successor*.
		return '#'; // replace by a real calculation.
	}

	/**
	 * This method operates in O(length*log N), where N is the size of this
	 * tree.
	 * 
	 * @param pos
	 *            location of the beginning of the string to retrieve
	 * @param length
	 *            length of the string to retrieve
	 * @return string of length that starts in position pos
	 * @throws IndexOutOfBoundsException
	 *             unless both pos and pos+length-1 are legitimate indexes
	 *             within this tree.
	 */
	public String get(int pos, int length) throws IndexOutOfBoundsException {
		int end = pos + length;
		if(end > this.size() || pos < 0 || pos > length) {
			throw new IndexOutOfBoundsException();
		}
		return this.root.get(pos, end);
	}

	/**
	 * This method is provided for you, and should not need to be changed. If
	 * split() and concatenate() are O(log N) operations as required, delete
	 * should also be O(log N)
	 * 
	 * @param start
	 *            position of beginning of string to delete
	 * 
	 * @param length
	 *            length of string to delete
	 * @return an EditTree containing the deleted string
	 * @throws IndexOutOfBoundsException
	 *             unless both start and start+length-1 are in range for this
	 *             tree.
	 */
	public EditTree delete(int start, int length)
			throws IndexOutOfBoundsException {
		if (start < 0 || start + length >= this.size())
			throw new IndexOutOfBoundsException(
					(start < 0) ? "negative first argument to delete"
							: "delete range extends past end of string");
		EditTree t2 = this.split(start);
		EditTree t3 = t2.split(length);
		this.concatenate(t3);
		return t2;
	}

	/**
	 * Append (in time proportional to the log of the size of the larger tree)
	 * the contents of the other tree to this one. Other should be made empty
	 * after this operation.
	 * 
	 * @param other
	 * @throws IllegalArgumentException
	 *             if this == other
	 */
	public void concatenate(EditTree other) throws IllegalArgumentException {

	}

	/**
	 * This operation must be done in time proportional to the height of this
	 * tree.
	 * 
	 * @param pos
	 *            where to split this tree
	 * @return a new tree containing all of the elements of this tree whose
	 *         positions are >= position. Their nodes are removed from this
	 *         tree.
	 * @throws IndexOutOfBoundsException
	 */
	public EditTree split(int pos) throws IndexOutOfBoundsException {
		return null; // replace by a real calculation.
	}
	

	/**
	 * Don't worry if you can't do this one efficiently.
	 * 
	 * @param s
	 *            the string to look for
	 * @return the position in this tree of the first occurrence of s; -1 if s
	 *         does not occur
	 */
	public int find(String s) {
		return find(s,0);
	}

	/**
	 * 
	 * @param s
	 *            the string to search for
	 * @param pos
	 *            the position in the tree to begin the search
	 * @return the position in this tree of the first occurrence of s that does
	 *         not occur before position pos; -1 if s does not occur
	 */
	public int find(String s, int pos) {
		if(s.equals(""))
			return 0;
		String editAsString = this.root.toString();
		if(editAsString.equals(""))
			return -1;
		int counter = pos;
		while(counter + s.length() - 1  < editAsString.length()){
			if(editAsString.charAt(counter)==(s.charAt(0))){
				if((editAsString.substring(counter, counter+s.length()).equals(s))){
					return counter;
				}
			}
			counter++;
		}
		return -1;
	}

	/**
	 * @return The root of this tree.
	 */
	public Node getRoot() {
		return this.root;
	}
}
